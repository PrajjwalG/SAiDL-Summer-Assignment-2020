# -*- coding: utf-8 -*-
"""Lenet

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eD4O3MwdOaJsjqhf17e3oYsmBc9I-nt1
"""

import keras
import numpy as np
from keras import optimizers
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Conv2D, Dense, Flatten, MaxPooling2D
from keras.callbacks import LearningRateScheduler, TensorBoard
from keras.preprocessing.image import ImageDataGenerator


num_classes   = 10

model = Sequential()
model.add(Conv2D(6, (5, 5), padding='valid', activation = 'relu', kernel_initializer='he_normal', input_shape=(32,32,3)))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))
model.add(Conv2D(16, (5, 5), padding='valid', activation = 'relu', kernel_initializer='he_normal'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))
model.add(Flatten())
model.add(Dense(120, activation = 'relu', kernel_initializer='he_normal'))
model.add(Dense(84, activation = 'relu', kernel_initializer='he_normal'))
model.add(Dense(10, activation = 'softmax', kernel_initializer='he_normal'))
sgd = optimizers.SGD(lr=.1, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

def scheduler(epoch):
    if epoch < 50:
        return 0.01
    if epoch < 75:
        return 0.005
    return 0.001

    # load data
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
    
    # data preprocessing  [raw - mean / std]

x_train = (x_train) / 255.0
x_test = (x_test ) / 255.0
        
 # build network   
print(model.summary())
# set callback
tb_cb = TensorBoard(log_dir='./lenet_dp_da', histogram_freq=0)
change_lr = LearningRateScheduler(scheduler)
cbks = [change_lr,tb_cb]

model.fit(x_train, y_train,batch_size=128,
                        steps_per_epoch=391,
                        epochs=100,
                        callbacks=cbks,
                        validation_data=(x_test, y_test))
