# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10CbQz8b20M2iqle9Et0G4PEvXn0OIM6Y
"""

!unzip cifar10 #used in colab
#importing libraries 
import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers
tf.random.set_seed(3)
# using image data generator to load data 
train_datagen = ImageDataGenerator(
        rescale=1./255,
        )
train_generator = train_datagen.flow_from_directory(
        'cifar10/train',
        target_size=(32,32),
        batch_size=128,
        class_mode = 'categorical',   
        )
validation_datagen = ImageDataGenerator(
    rescale = 1/255.0
)
validation_generator = train_datagen.flow_from_directory(
        'cifar10/test',
        target_size=(32,32),
        batch_size=128,
        class_mode = 'categorical',   
        )
# model creation
model = tf.keras.models.Sequential([
    layers.Conv2D(6, (5, 5), padding='valid', activation = 'relu', kernel_initializer='he_normal', input_shape=(32,32,3)),
    layers.MaxPooling2D((2, 2), strides=(2, 2)),
    layers.Conv2D(16, (5, 5), padding='valid', activation = 'relu', kernel_initializer='he_normal'),
    layers.MaxPooling2D((2, 2), strides=(2, 2)),
    layers.Flatten(),
    layers.Dense(120, activation = 'relu', kernel_initializer='he_normal'),
    layers.Dense(84, activation = 'relu', kernel_initializer='he_normal'),
    layers.Dense(10, activation = 'softmax', kernel_initializer='he_normal'),
    
])

from keras import optimizers
sgd = optimizers.SGD(lr=.1, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
# learning rate scheduler
def scheduler(epoch):
    if epoch < 50:
        return 0.01
    if epoch < 75:
        return 0.005
    return 0.001
from keras.callbacks import LearningRateScheduler, TensorBoard
tb_cb = TensorBoard(log_dir='./lenet_dp_da', histogram_freq=0)
change_lr = LearningRateScheduler(scheduler)
cbks = [change_lr,tb_cb]
# training
model.fit_generator(
train_generator,
steps_per_epoch = 391,
epochs = 100,
callbacks = cbks,
validation_data = validation_generator
)