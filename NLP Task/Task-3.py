# -*- coding: utf-8 -*-
"""Copy of nlp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10viwZM0s3BuejDL5e8CT8VyHFYcAhMjj
"""

from numpy import array
from keras.preprocessing.text import one_hot
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers.core import Activation, Dropout, Dense
from keras.layers import Flatten, LSTM
from keras.layers import GlobalMaxPooling1D
from keras.models import Model
from keras.layers.embeddings import Embedding
from sklearn.model_selection import train_test_split
from keras.preprocessing.text import Tokenizer
from keras.layers import Input
from keras.layers.merge import Concatenate

import pandas as pd
import numpy as np


import matplotlib.pyplot as plt

# importing data
train = pd.read_csv("train.csv")
print(train.shape)
train.head()

test = pd.read_csv("val.csv")
test.head()

# dropping data that is null
filter = train["Post"] != ""
train = train[filter]
train = train.dropna()

filter = train["Title"] != ""
train = train[filter]
train = train.dropna()

filter = test["Post"] != ""
test = test[filter]
test = test.dropna()

filter = test["Title"] != ""
test = test[filter]
test = test.dropna()

# data pre processing
def preprocess_text(sen):
    # Remove punctuations and numbers
    sentence = re.sub('[^a-zA-Z]', ' ', sen)

    # Single character removal
    sentence = re.sub(r"\s+[a-zA-Z]\s+", ' ', sentence)

    # Removing multiple spaces
    sentence = re.sub(r'\s+', ' ', sentence)

    return sentence

import re
X_train = []
sentences = list(train["Post"])
for sen in sentences:
    X_train.append(preprocess_text(sen))

y_train = train['Flair']
X_train2 = []
sentences = list(train["Title"])
for sen in sentences:
    X_train2.append(preprocess_text(sen))

import re
X_test = []
sentences = list(test["Post"])
for sen in sentences:
    X_test.append(preprocess_text(sen))

y_test = test['Flair']
X_test2 = []
sentences = list(test["Title"])
for sen in sentences:
    X_test2.append(preprocess_text(sen))

from sklearn import preprocessing

# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()

# Encode labels in column 'species'.
y_train = label_encoder.fit_transform(y_train)
y_test = label_encoder.fit_transform(y_test)

from keras.utils import to_categorical
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

tokenizer= Tokenizer(num_words=9000,
                     filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                     lower=True,
                     split=" ",
                     char_level=True)
tokenizer.fit_on_texts(X_train)

X_train = tokenizer.texts_to_sequences(X_train)
X_train2 = tokenizer.texts_to_sequences(X_train2)
X_test = tokenizer.texts_to_sequences(X_test)
X_test2 = tokenizer.texts_to_sequences(X_test2)
vocab_size = len(tokenizer.word_index) + 1

maxlen = 450

X_train = pad_sequences(X_train, padding='post', maxlen=maxlen)
X_train2 = pad_sequences(X_train2, padding='post', maxlen=100)
X_test = pad_sequences(X_test, padding='post', maxlen=maxlen)
X_test2 = pad_sequences(X_test2, padding='post', maxlen=100)

# word embeddings
from numpy import array
from numpy import asarray
from numpy import zeros

embeddings_dictionary = dict()

glove_file = open('/content/drive/My Drive/glove.6B.100d.txt', encoding="utf8")

for line in glove_file:
    records = line.split()
    word = records[0]
    vector_dimensions = asarray(records[1:], dtype='float32')
    embeddings_dictionary[word] = vector_dimensions
glove_file.close()

embedding_matrix = zeros((vocab_size, 100))
for word, index in tokenizer.word_index.items():
    embedding_vector = embeddings_dictionary.get(word)
    if embedding_vector is not None:
        embedding_matrix[index] = embedding_vector

X_train3 = np.hstack((X_train2, X_train))

!pip install keras_self_attention

import tensorflow as tf
import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, GlobalMaxPooling1D,BatchNormalization,Dense,concatenate
from keras_self_attention import SeqSelfAttention
from keras import backend as K
# model = Sequential([
# Embedding(vocab_size, 100, weights=[embedding_matrix],input_length=maxlen+100,trainable=False),
# LSTM(128, return_sequences=True,),
# SeqSelfAttention(attention_activation='sigmoid'),
# Conv1D(32,3,padding = 'same',activation = 'relu'),
# MaxPooling1D(3),
# GlobalMaxPooling1D(),
# BatchNormalization(),
# Dense(150, activation='relu'),
# Dense(100, activation='relu'),
# Dense(50, activation='relu'),
# Dense(15, activation='sigmoid'),
# ])

_input = Input(shape=(maxlen+100,), dtype='int32')

# get the embedding layer
embedded = Embedding(
        input_dim=vocab_size,
        output_dim=100,
        input_length=maxlen+100,
        trainable=True,
        weights=[embedding_matrix]
    )(_input)

activations = LSTM(128, return_sequences=True)(embedded)

# compute importance for each step
attention = keras.layers.TimeDistributed(Dense(1, activation='tanh'))(activations) 
attention = Flatten()(attention)
attention = keras.layers.Activation('softmax', name = 'attention_vec')(attention)
attention = keras.layers.RepeatVector(128)(attention)
attention = keras.layers.Permute([2, 1])(attention)

# apply the attention
sent_representation = keras.layers.multiply([activations, attention])
sent_representation = keras.layers.Lambda(lambda xin: K.sum(xin, axis=1))(sent_representation)

probabilities = Dense(15, activation='softmax')(sent_representation)

model = Model(inputs=_input, outputs=probabilities)

model.summary()
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['acc'])

X_test3 = np.hstack((X_test2, X_test))

# training 
history = model.fit(X_train3 , y_train, batch_size=128, epochs=20, verbose=1, validation_data=(X_test3, y_test))

for layer in model.layers:
	# check for convolutional layer
	if 'time' not in layer.name:
		continue
	# get filter weights
	filters, biases = layer.get_weights()
	print(layer.name, filters.shape)

f_min, f_max = filters.min(), filters.max()
filters = (filters - f_min) / (f_max - f_min)

n_filters, ix = 6, 1
plt.imshow(filters, cmap='gray',aspect='auto')
		
# show the figure
plt.show()